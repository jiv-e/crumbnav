// Generated by CoffeeScript 1.9.2

/*
	crumbnav.js 0.1

  Created by Juho Viitasalo

	Based on flexnav by Jason Weaver http://jasonweaver.name
	Released under http://unlicense.org/
 */

(function() {
  var $;

  $ = jQuery;

  $(function() {});

  $.fn.crumbnav = function(options) {
    var $breadcrumb, $current, $nav, $navUl, $parents, $root, $top_nav_items, addBasicClasses, addBreadcrumbClasses, addButtons, addListeners, addParentClasses, breakpoint, button, closeMenu, closeRootsMenu, count, nav_percent, nav_width, openMenu, openRootsMenu, removeBreadcrumbClasses, resetMenu, resizer, settings, showMenu;
    settings = $.extend({
      'navClass': 'crumbnav',
      'navTitleClass': 'crumbnav__title',
      'parentClass': 'crumbnav__parent',
      'openClass': 'cn-open',
      'rootsOpenClass': 'cn-open-roots',
      'rootClass': 'crumbnav__root',
      'currentClass': 'active',
      'breadcrumbClass': 'crumbnav-crumb',
      'buttonClass': 'crumbnav__button',
      'buttonMenuClass': 'crumbnav__button--menu',
      'buttonRootsMenuClass': 'crumbnav__button--root-menu',
      'multipleRootsClass': 'crumbnav--multiple-roots',
      'largeClass': 'crumbnav--large',
      'hoverIntent': false,
      'hoverIntentTimeout': 150,
      'calcItemWidths': false,
      'hover': true
    }, options);
    $nav = $(this);
    $navUl = $nav.children('ul').length === 1 ? $nav.children('ul') : alert("Unsupported number of ul's inside the navigation!");
    $current = $('li.' + settings.currentClass, $navUl);
    if ($current.length > 1) {
      alert('Multiple active elements in the menu! There should be only one.');
    }
    $root = $();
    $parents = $();
    $breadcrumb = $();
    button = '<span class="' + settings.buttonClass + '"><i></i></span>';
    if ($nav.children('.' + settings.navTitleClass).length === 0) {
      $nav.prepend('<div class="' + settings.navTitleClass + '">Menu</div>');
    }
    addBreadcrumbClasses = function() {
      var $breadcrumbCount, $currentParents;
      $currentParents = $current.parentsUntil($navUl, 'li');
      $breadcrumb = $currentParents.add($current);
      $breadcrumbCount = $breadcrumb.length;
      return $breadcrumb.addClass(settings.breadcrumbClass).each(function(index) {
        return $(this).addClass(settings.breadcrumbClass + '-out-' + index + ' ' + settings.breadcrumbClass + '-in-' + ($breadcrumbCount - index - 1));
      });
    };
    addBreadcrumbClasses();
    addParentClasses = function() {
      return $navUl.find("li").each(function() {
        if ($(this).has("ul").length) {
          $(this).addClass(settings.parentClass);
          return $parents = $parents.add($(this));
        }
      });
    };
    addParentClasses();
    addBasicClasses = function() {
      $nav.addClass('with-js');
      $current = $('li.' + settings.currentClass, $navUl);
      if ($current.length === 0) {
        return $root = $nav.addClass(settings.rootClass);
      } else {
        return $root = $navUl.children('.' + settings.parentClass + '.' + settings.breadcrumbClass).addClass(settings.rootClass);
      }
    };
    addBasicClasses();
    addButtons = function() {
      var $buttons;
      if ($navUl.children('li').length > 1 && $current.length === 0) {
        $nav.addClass(settings.multipleRootsClass);
        $navUl.before($(button).addClass(settings.buttonRootsMenuClass));
      }
      $navUl.after($(button).addClass(settings.buttonMenuClass));
      return $buttons = $parents.not($root).append(button);
    };
    addButtons();
    if (settings.calcItemWidths === true) {
      $top_nav_items = $navUl.find('>li');
      count = $top_nav_items.length;
      nav_width = 100 / count;
      nav_percent = nav_width + "%";
    }
    if ($nav.data('breakpoint')) {
      breakpoint = $nav.data('breakpoint');
    }
    showMenu = function() {
      if ($nav.hasClass(settings.largeClass) === true && settings.hover === true) {
        return $(this).find('>ul').addClass(settings.openClass);
      }
    };
    resetMenu = function() {
      if ($nav.hasClass(settings.largeClass) === true && $(this).find('>ul').hasClass(settings.openClass) === true && settings.hover === true) {
        return $(this).find('>ul').removeClass(settings.openClass);
      }
    };
    resizer = function() {
      if ($(window).width() <= breakpoint) {
        return $nav.removeClass(settings.largeClass);
      } else if ($(window).width() > breakpoint) {
        $nav.addClass(settings.largeClass);
        if (settings.hoverIntent === true) {
          return $('.' + settings.parentClass).hoverIntent({
            over: showMenu,
            out: resetMenu,
            timeout: settings.hoverIntentTimeout
          });
        } else if (settings.hoverIntent === false) {
          return $('.' + settings.parentClass).on('mouseenter', showMenu).on('mouseleave', resetMenu);
        }
      }
    };
    closeMenu = function() {
      $nav.removeClass(settings.openClass);
      return $nav.find('.' + settings.openClass).removeClass(settings.openClass);
    };
    openMenu = function() {
      $nav.addClass(settings.openClass).children('.' + settings.buttonMenuClass).addClass(settings.openClass);
      return $breadcrumb.addClass(settings.openClass).children('.' + settings.buttonClass).addClass(settings.openClass);
    };
    closeRootsMenu = function() {
      $nav.removeClass(settings.rootsOpenClass);
      return $nav.find('.' + settings.rootsOpenClass).removeClass(settings.rootsOpenClass);
    };
    openRootsMenu = function() {
      $nav.addClass(settings.rootsOpenClass).children('ul').children('li').addClass(settings.rootsOpenClass);
      return $nav.children('.' + settings.buttonRootsMenuClass).addClass(settings.rootsOpenClass);
    };
    addListeners = function() {
      $nav.children('.' + settings.buttonMenuClass).on('click', function(e) {
        e.stopPropagation();
        e.preventDefault();
        if ($nav.hasClass(settings.openClass) === true) {
          return closeMenu();
        } else {
          closeRootsMenu();
          return openMenu();
        }
      });
      $nav.children('.' + settings.buttonRootsMenuClass).on('click', function(e) {
        e.stopPropagation();
        e.preventDefault();
        if ($nav.hasClass(settings.rootsOpenClass) === true) {
          return closeRootsMenu();
        } else {
          closeMenu();
          return openRootsMenu();
        }
      });
      $('.blaa' + settings.buttonClass).on('click', function(e) {
        var $parentLi;
        $parentLi = $(this).parent('.' + settings.parentClass);
        if ($navUl.hasClass(settings.largeClass) === true) {
          $(this).parent('.' + settings.parentClass).siblings().removeClass(settings.openClass);
        }
        return $parentLi.toggleClass(settings.openClass);
      });
      return $parents.children('.' + settings.buttonClass).on('click', function(e) {
        var $parent;
        e.stopPropagation();
        e.preventDefault();
        $parent = $(this).parent('.' + settings.parentClass);
        if ($navUl.hasClass(settings.largeClass) === true) {
          $parent.siblings().removeClass(settings.openClass);
        }
        if ($parent.hasClass(settings.openClass)) {
          $parent.removeClass(settings.openClass);
          return $parent.find('.' + settings.openClass).removeClass(settings.openClass);
        } else {
          $parent.addClass(settings.openClass);
          $(this).addClass(settings.openClass);
          return $current.addClass(settings.openClass).children('.' + settings.buttonClass).addClass(settings.openClass);
        }
      });
    };
    addListeners();
    $navUl.find('.blaa' + settings.parentClass + ' *').focus(function() {
      $(this).parent('.' + settings.parentClass).parent().find(".open").not(this).removeClass("open").hide();
      return $(this).parent('.' + settings.parentClass).find('>ul').addClass("open").show();
    });
    resizer();
    $(window).on('resize', resizer);
    removeBreadcrumbClasses = function() {
      var re;
      $current.removeClass(settings.currentClass);
      $root.removeClass(settings.rootClass);
      $nav.find('.' + settings.openClass).removeClass(settings.openClass);
      re = new RegExp(settings.breadcrumbClass + '[^ ]*', 'g');
      return $navUl.find('.' + settings.breadcrumbClass).each(function() {
        return $(this)[0].className = $(this)[0].className.replace(re, '');
      });
    };
    return this.refreshNav = function($newActive) {
      removeBreadcrumbClasses();
      $nav.removeClass(settings.openClass);
      $newActive.parent('li').addClass(settings.currentClass);
      $current = $('li.' + settings.currentClass, $navUl);
      addBreadcrumbClasses();
      addBasicClasses();
      if ($navUl.children('li').length > 1 && $current.length === 1) {
        $nav.addClass(settings.multipleRootsClass);
        if ($('.' + settings.buttonRootsMenuClass).length === 0) {
          $navUl.before($(button).addClass(settings.buttonRootsMenuClass));
        }
      }
      return addListeners();
    };
  };

}).call(this);
